    conjunto de primeros calculado: {EPSILON=[EPSILON]
        PARSE=[while, for, id, log, newline, int, funcion, float, eof, true, false, string, nil, from, import, other, retorno, if, obrace, okey]
        FROM_INPUT=[while, for, id, log, int, funcion, float, true, false, string, nil, from, import, other, retorno, if, obrace, okey]
        FROM_FILE=[while, for, id, log, newline, int, funcion, float, eof, true, false, string, nil, from, import, other, retorno, if, obrace, okey]
        STAT=[while, for, id, log, int, funcion, float, true, false, string, nil, from, import, other, retorno, if, obrace, okey]
        newline=[newline]
        FROM_FILE2=[EPSILON, while, for, id, log, newline, int, funcion, float, true, false, string, nil, from, import, other, retorno, if, obrace, okey]
        eof=[eof]
        FROM_FILE3=[while, for, id, log, newline, int, funcion, float, true, false, string, nil, from, import, other, retorno, if, obrace, okey]
        SIMPLE_STAT=[id, log, int, float, true, false, string, nil, from, import, other, retorno, obrace, okey]
        COMPOUND_STAT=[while, for, funcion, if]
        IF_STAT=[if]
        WHILE_STAT=[while]
        FOR_STAT=[for]
        FUNCION=[funcion]
        ASSIGNMENT=[id]
        LOG=[log]
        IMPORTAR=[from, import]
        RETORNAR=[retorno]
        ATOM=[id, int, float, true, false, obrace, string, nil, okey]
        other=[other]
        VARIABLE=[id]
        assign=[assign]
        ASSIGNMENT2=[id, minus, not, opar, int, float, true, false, string, obrace, nil, okey]
        EXPR=[id, minus, not, opar, int, float, true, false, obrace, string, nil, okey]
        if=[if]
        CONDITION_BLOCK=[id, minus, not, opar, int, float, true, false, string, obrace, nil, okey]
        IF_STAT2=[EPSILON, else]
        IF_STAT3=[EPSILON, else]
        IF_STAT4=[else]
        else=[else]
        STAT_BLOCK=[while, for, id, log, int, funcion, float, true, false, string, nil, from, import, other, retorno, if, obrace, okey]
        while=[while]
        for=[for]
        id=[id]
        in=[in]
        log=[log]
        opar=[opar]
        cpar=[cpar]
        funcion=[funcion]
        token_par_izq=[token_par_izq]
        FUNCION2=[EPSILON, id, token_coma, assign]
        token_par_der=[token_par_der]
        FUNCION3=[EPSILON, token_newline|STAT]
        end=[end]
        PARAMETRO=[EPSILON, id, assign]
        FUNCION4=[EPSILON, token_coma]
        FUNCION5=[token_newline|STAT]
        FUNCION6=[token_coma]
        token_newline|STAT=[token_newline|STAT]
        token_coma=[token_coma]
        from=[from]
        import=[import]
        IMPORTAR1=[EPSILON, point]
        IMPORTAR2=[point]
        point=[point]
        retorno=[retorno]
        CONDITION_BLOCK2=[EPSILON, newline]
        obrace=[obrace]
        STAT_BLOCK1=[while, EPSILON, for, id, log, newline, int, funcion, float, true, false, string, nil, from, import, other, retorno, if, obrace, okey]
        cbrace=[cbrace]
        STAT_BLOCK2=[while, for, id, log, newline, int, funcion, float, true, false, string, nil, from, import, other, retorno, if, obrace, okey]
        ARRAY=[okey]
        okey=[okey]
        ARRAY1=[EPSILON, id, opar, int, float, true, false, string, nil, minus, not, obrace, okey]
        ckey=[ckey]
        ARRAY2=[EPSILON, comma]
        ARRAY3=[comma]
        comma=[comma]
        ACCESSARRAY=[id]
        VAR=[EPSILON, opar, point, okey]
        VARIABLEA1=[EPSILON, point]
        VARIABLEA2=[EPSILON, opar]
        VARIABLEB1=[EPSILON, comma]
        VARIABLEC1=[EPSILON, comma]
        VARIABLEC2=[comma]
        VARIABLEAB1=[point]
        VARIABLE1=[EPSILON, point]
        VARIABLE2=[point]
        PARAMETRO2=[EPSILON, assign]
        OPUN=[minus, not]
        EXPR1=[lt, EPSILON, gt, eq, neq, and, or, minus, pow, mult, div|mod, plus, lteq, gteq]
        OPBIN=[lt, gt, eq, neq, and, or, minus, pow, mult, div|mod, plus, lteq, gteq]
        minus=[minus]
        not=[not]
        OPMUL=[mult, div|mod]
        OPSUM=[minus, plus]
        OPREL=[lt, gt, lteq, gteq]
        OPEQ=[eq, neq]
        OPLOG=[and, or]
        pow=[pow]
        mult=[mult]
        div|mod=[div|mod]
        plus=[plus]
        lteq=[lteq]
        gteq=[gteq]
        lt=[lt]
        gt=[gt]
        eq=[eq]
        neq=[neq]
        and=[and]
        or=[or]
        int=[int]
        float=[float]
        true=[true]
        false=[false]
        string=[string]
        OBJETO=[obrace]
        nil=[nil]
        OBJETO1=[EPSILON, id]
        KEYVALUE=[id]
        OBJETOA1=[EPSILON, comma]
        OBJETOA2=[comma]
        points=[points]
        EXP=[]}

    SIGUIENTES
    conjunto de siguientes calculado: 
    
    {PARSE=[ENDOFPROGRAM]
        FROM_INPUT=[ENDOFPROGRAM]
        FROM_FILE=[ENDOFPROGRAM]
        STAT=[while, for, id, log, newline, int, funcion, float, eof, true, false, string, nil, from, import, other, retorno, if, obrace, cbrace, okey]
        FROM_FILE2=[eof]
        FROM_FILE3=[while, for, id, log, newline, int, funcion, float, eof, true, false, string, nil, from, import, other, retorno, if, obrace, okey]
        SIMPLE_STAT=[while, for, id, log, newline, int, funcion, float, eof, true, false, string, nil, from, import, other, retorno, if, obrace, cbrace, okey]
        COMPOUND_STAT=[while, for, id, log, newline, int, funcion, float, eof, true, false, string, nil, from, import, other, retorno, if, obrace, cbrace, okey]
        IF_STAT=[while, for, id, log, newline, int, funcion, float, eof, true, false, string, nil, from, import, other, retorno, if, obrace, cbrace, okey]
        WHILE_STAT=[while, for, id, log, newline, int, funcion, float, eof, true, false, string, nil, from, import, other, retorno, if, obrace, cbrace, okey]
        FOR_STAT=[while, for, id, log, newline, int, funcion, float, eof, true, false, string, nil, from, import, other, retorno, if, obrace, cbrace, okey]
        FUNCION=[while, for, id, log, newline, int, funcion, float, eof, true, false, string, nil, from, import, other, retorno, if, obrace, cbrace, okey]
        ASSIGNMENT=[while, for, id, log, newline, int, funcion, float, eof, true, false, string, nil, from, import, other, retorno, if, obrace, cbrace, okey]
        LOG=[while, for, id, log, newline, int, funcion, float, eof, true, false, string, nil, from, import, other, retorno, if, obrace, cbrace, okey]
        IMPORTAR=[while, for, id, log, newline, int, funcion, float, eof, true, false, string, nil, from, import, other, retorno, if, obrace, cbrace, okey]
        RETORNAR=[while, for, id, log, newline, int, funcion, float, eof, true, false, string, nil, from, import, other, retorno, if, obrace, cbrace, okey]
        ATOM=[ckey, comma, newline, eof, minus, other, if, pow, mult, div|mod, plus, lteq, gteq, lt, while, gt, for, eq, id, neq, and, log, or, int, cpar, funcion, float, true, false, string, token_par_der, nil, token_coma, from, import, retorno, obrace, cbrace, okey]
        VARIABLE=[ckey, comma, newline, eof, minus, other, assign, if, pow, mult, div|mod, plus, lteq, gteq, lt, while, gt, for, eq, id, neq, and, log, or, int, cpar, funcion, float, true, false, string, token_par_der, nil, token_coma, from, import, retorno, obrace, cbrace, okey]
        ASSIGNMENT2=[while, for, id, log, newline, int, funcion, float, eof, true, false, string, nil, from, import, other, retorno, if, obrace, cbrace, okey]
        EXPR=[ckey, comma, newline, eof, minus, other, if, pow, mult, div|mod, plus, lteq, gteq, while, lt, for, gt, id, eq, neq, log, and, or, int, cpar, funcion, float, true, false, string, token_par_der, nil, token_coma, from, import, retorno, obrace, cbrace, okey]
        CONDITION_BLOCK=[while, for, id, log, newline, int, funcion, float, eof, true, false, string, nil, from, import, other, retorno, if, obrace, cbrace, else, okey]
        IF_STAT2=[while, for, id, log, newline, int, funcion, float, eof, true, false, string, nil, from, import, other, retorno, if, obrace, cbrace, else, okey]
        IF_STAT3=[while, for, id, log, newline, int, funcion, float, eof, true, false, string, nil, from, import, other, retorno, if, obrace, cbrace, okey]
        IF_STAT4=[while, for, id, log, newline, int, funcion, float, eof, true, false, string, nil, from, import, other, retorno, if, obrace, cbrace, else, okey]
        STAT_BLOCK=[while, for, id, log, newline, int, funcion, float, eof, true, false, string, nil, from, import, other, retorno, if, obrace, cbrace, else, okey]
        FUNCION2=[token_par_der]
        FUNCION3=[end]
        PARAMETRO=[token_coma, token_par_der]
        FUNCION4=[token_par_der]
        FUNCION5=[token_newline|STAT, end]
        FUNCION6=[token_coma, token_par_der]
        IMPORTAR1=[while, for, id, log, newline, int, funcion, float, eof, true, false, string, nil, from, import, other, retorno, if, obrace, cbrace, okey]
        IMPORTAR2=[while, for, id, log, newline, int, funcion, float, eof, true, false, string, nil, from, import, other, point, retorno, if, obrace, cbrace, okey]
        CONDITION_BLOCK2=[while, for, id, log, int, funcion, float, true, false, string, nil, from, import, other, retorno, if, obrace, okey]
        STAT_BLOCK1=[cbrace]
        STAT_BLOCK2=[while, for, id, log, newline, int, funcion, float, true, false, string, nil, from, import, other, retorno, if, obrace, cbrace, okey]
        ARRAY=[ckey, comma, newline, eof, minus, other, if, pow, mult, div|mod, plus, lteq, gteq, lt, while, gt, for, eq, id, neq, and, log, or, int, cpar, funcion, float, true, false, string, token_par_der, nil, token_coma, from, import, retorno, obrace, cbrace, okey]
        ARRAY1=[ckey]
        ARRAY2=[ckey]
        ARRAY3=[ckey, comma]
        ACCESSARRAY=[ckey, comma, newline, eof, minus, other, if, pow, mult, div|mod, plus, lteq, gteq, lt, while, gt, for, eq, id, neq, and, log, or, int, cpar, funcion, float, true, false, string, token_par_der, nil, token_coma, from, import, retorno, obrace, cbrace, okey]
        VAR=[]
        VARIABLEA1=[opar]
        VARIABLEA2=[]
        VARIABLEB1=[cpar]
        VARIABLEC1=[cpar]
        VARIABLEC2=[comma, cpar]
        VARIABLEAB1=[opar, point]
        VARIABLE1=[okey]
        VARIABLE2=[point, okey]
        PARAMETRO2=[token_coma, token_par_der]
        OPUN=[id, minus, not, opar, int, float, true, false, string, obrace, nil, okey]
        EXPR1=[ckey, comma, newline, eof, minus, other, if, pow, mult, div|mod, plus, lteq, gteq, while, lt, for, gt, id, eq, neq, log, and, or, int, cpar, funcion, float, true, false, string, token_par_der, nil, token_coma, from, import, retorno, obrace, cbrace, okey]
        OPBIN=[id, minus, not, opar, int, float, true, false, string, obrace, nil, okey]
        OPMUL=[id, minus, not, opar, int, float, true, false, string, obrace, nil, okey]
        OPSUM=[id, minus, not, opar, int, float, true, false, string, obrace, nil, okey]
        OPREL=[id, minus, not, opar, int, float, true, false, string, obrace, nil, okey]
        OPEQ=[id, minus, not, opar, int, float, true, false, string, obrace, nil, okey]
        OPLOG=[id, minus, not, opar, int, float, true, false, string, obrace, nil, okey]
        OBJETO=[ckey, comma, newline, eof, minus, other, if, pow, mult, div|mod, plus, lteq, gteq, lt, while, gt, for, eq, id, neq, and, log, or, int, cpar, funcion, float, true, false, string, token_par_der, nil, token_coma, from, import, retorno, obrace, cbrace, okey]
        OBJETO1=[cbrace]
        KEYVALUE=[comma, cbrace]
        OBJETOA1=[cbrace]
        OBJETOA2=[comma, cbrace]
        EXP=[comma, cbrace]}
